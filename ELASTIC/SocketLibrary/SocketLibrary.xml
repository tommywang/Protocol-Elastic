<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>SocketLibrary</name>
  </assembly>
  <members>
    <member name="N:SocketLibrary">
    </member>
    <member name="T:SocketLibrary.Client">
      <summary>
La classe Client de la couche Socket. Elle implémente l'interface IClient qui sera manipulé par les entités externes à la bibliothèque.</summary>
      <seealso cref="SocketLibrary.IClient">
IClient</seealso>
    </member>
    <member name="E:SocketLibrary.Client.clientSocketReceiveEvent">
      <summary>
Occurs when .</summary>
    </member>
    <member name="M:SocketLibrary.Client.#ctor(System.String,System.Int32)">
      <summary>
Le constructeur de la classe Client.</summary>
      <param name="ip">
Adresse du serveur.</param>
      <param name="port">
Port du serveur sur lequel le client va se connecter.</param>
    </member>
    <member name="M:SocketLibrary.Client.connect">
      <summary>
Connecte le client au serveur.</summary>
    </member>
    <member name="M:SocketLibrary.Client.send(System.Byte[])">
      <summary>
Envoie un message au serveur sur lequel le client est connecté.</summary>
      <param name="msg">
Tableau d'octet qui va être envoyé.</param>
    </member>
    <member name="M:SocketLibrary.Client.receiveMessage">
      <summary>
Méthode du processus léger écoutant les messages du serveur. Le processus léger est bloquant sur le receive, et implique que la taille du message soit contenue dans les quatre premiers octets de celui-ci. Un event est levé à chaque réception de message.</summary>
    </member>
    <member name="M:SocketLibrary.Client.disconnect">
      <summary>
Déconnecte le client du serveur.</summary>
    </member>
    <member name="M:SocketLibrary.Client.subscribe(System.Action{System.Object,SocketLibrary.ClientEventArgs})">
      <summary>
Méthode d'abonnement évènementielle.</summary>
      <param name="listener">
Procédure qui sera appelée lors de la levée de l'évènement.</param>
    </member>
    <member name="M:SocketLibrary.Client.unsubscribe">
      <summary>
Méthode de désabonnement évènementielle.</summary>
    </member>
    <member name="T:SocketLibrary.ClientEventArgs">
      <summary>
La classe ClientEventArgs. Ce sera le type de l'évènement levé à chaque réception de message.</summary>
      <seealso cref="EventArgs">
EventArgs</seealso>
    </member>
    <member name="M:SocketLibrary.ClientEventArgs.#ctor(System.Byte[])">
      <summary>
Le constructeur de l'évènement.</summary>
      <param name="msg">
Le message sous la forme d'un tableau d'octet.</param>
    </member>
    <member name="P:SocketLibrary.ClientEventArgs.Msg">
      <summary>
Propriété d'accès au message lié à l'évènement.</summary>
      <value>
Le message reçu.</value>
    </member>
    <member name="T:SocketLibrary.Server">
      <summary>
La classe Server de la couche Socket. Elle implémente l'interface IServer qui sera manipulé par les entités externes à la bibliothèque.</summary>
      <seealso cref="SocketLibrary.IServer">
IServer</seealso>
    </member>
    <member name="E:SocketLibrary.Server.serverSocketReceiveEvent">
      <summary>
Occurs when .</summary>
    </member>
    <member name="M:SocketLibrary.Server.#ctor(System.Int32)">
      <summary>
Le constructeur de la classe Server.</summary>
      <param name="port">
Port sur lequel le serveur va démarrer.</param>
    </member>
    <member name="M:SocketLibrary.Server.start">
      <summary>
Démarre le serveur et le met également sur écoute TCP.</summary>
      <returns>
True si tout s'est bien passé, False sinon.</returns>
    </member>
    <member name="M:SocketLibrary.Server.listenConnect">
      <summary>
Méthode du processus léger écoutant les connexions des clients. A chaque nouveau client est associé un processus léger ainsi qu'une socket.</summary>
    </member>
    <member name="M:SocketLibrary.Server.receiveClientMsg(System.Object)">
      <summary>
Méthode du processus léger écoutant les messages des clients. Le processus léger est bloquant sur le receive, et implique que la taille du message soit contenue dans les quatre premiers octets de celui-ci. Un event est levé à chaque réception de message.</summary>
      <param name="o">
</param>
    </member>
    <member name="M:SocketLibrary.Server.stop">
      <summary>
Arrête le serveur. Tous les processus légers sont interrompus, et la liste des clients est vidée.</summary>
    </member>
    <member name="M:SocketLibrary.Server.send(System.Net.Sockets.Socket,System.Byte[])">
      <summary>
Envoie un message à une socket donnée.</summary>
      <param name="socket">
Socket sur laquelle le message va être envoyé.</param>
      <param name="msg">
Tableau d'octet qui va être envoyé.</param>
    </member>
    <member name="M:SocketLibrary.Server.subscribe(System.Action{System.Object,SocketLibrary.ServerEventArgs})">
      <summary>
Méthode d'abonnement évènementielle.</summary>
      <param name="listener">
Procédure qui sera appelée lors de la levée de l'évènement.</param>
    </member>
    <member name="M:SocketLibrary.Server.unsubscribe">
      <summary>
Méthode de désabonnement évènementielle.</summary>
    </member>
    <member name="T:SocketLibrary.ServerEventArgs">
      <summary>
La classe ServerEventArgs. Ce sera le type de l'évènement levé à chaque réception de message.</summary>
      <seealso cref="EventArgs">
EventArgs</seealso>
    </member>
    <member name="M:SocketLibrary.ServerEventArgs.#ctor(System.Net.Sockets.Socket,System.Byte[])">
      <summary>
Le constructeur de l'évènement.</summary>
      <param name="socketClient">
Socket du client qui a envoyé le message.</param>
      <param name="msg">
Le message sous la forme d'un tableau d'octet.</param>
    </member>
    <member name="P:SocketLibrary.ServerEventArgs.Msg">
      <summary>
Propriété d'accès au message lié à l'évènement.</summary>
      <value>
Le message reçu.</value>
    </member>
    <member name="P:SocketLibrary.ServerEventArgs.SocketClient">
      <summary>
Propriété d'accès à la Socket liée à l'évènement.</summary>
      <value>
La socket qui a émis le message.</value>
    </member>
    <member name="T:SocketLibrary.utils">
      <summary>
La classe utils. Permet l'interfaçage de la couche Socket avec les assembly externes à la bibliothèque.</summary>
    </member>
    <member name="M:SocketLibrary.utils.isIPAddressCorrect(System.String)">
      <summary>
Vérifie le format des adresses IP.</summary>
      <returns>
True si l'adresse est correctement formatée, False sinon.</returns>
      <param name="adress">
Adresse IP qui doit être vérifiée.</param>
    </member>
    <member name="M:SocketLibrary.utils.createClient(System.String,System.Int32)">
      <summary>
Crée un client.</summary>
      <returns>
Le client qui pourra être manipulé.</returns>
      <param name="ip">
Adresse IP sur laquelle le client doit se connecter.</param>
      <param name="port">
Port sur lequel le client doit se connecter.</param>
    </member>
    <member name="M:SocketLibrary.utils.createServer(System.Int32)">
      <summary>
Crée un serveur.</summary>
      <returns>
Le serveur qui pourra être manipulé.</returns>
      <param name="port">
Port sur lequel le serveur va opérer.</param>
    </member>
    <member name="M:SocketLibrary.IClient.connect">
      <summary>
Connecte le client au serveur.</summary>
    </member>
    <member name="M:SocketLibrary.IClient.send(System.Byte[])">
      <summary>
Envoie un message au serveur sur lequel le client est connecté.</summary>
      <param name="msg">
Tableau d'octet qui va être envoyé.</param>
    </member>
    <member name="M:SocketLibrary.IClient.disconnect">
      <summary>
Déconnecte le client du serveur.</summary>
    </member>
    <member name="M:SocketLibrary.IClient.subscribe(System.Action{System.Object,SocketLibrary.ClientEventArgs})">
      <summary>
Méthode d'abonnement évènementielle.</summary>
      <param name="listener">
Procédure qui sera appelée lors de la levée de l'évènement.</param>
    </member>
    <member name="M:SocketLibrary.IClient.unsubscribe">
      <summary>
Méthode de désabonnement évènementielle.</summary>
    </member>
    <member name="M:SocketLibrary.IServer.start">
      <summary>
Démarre le serveur et le met également sur écoute TCP.</summary>
      <returns>
True si tout s'est bien passé, False sinon.</returns>
    </member>
    <member name="M:SocketLibrary.IServer.stop">
      <summary>
Arrête le serveur. Tous les processus légers sont interrompus, et la liste des clients est vidée.</summary>
    </member>
    <member name="M:SocketLibrary.IServer.send(System.Net.Sockets.Socket,System.Byte[])">
      <summary>
Envoie un message à une socket donnée.</summary>
      <param name="socket">
Socket sur laquelle le message va être envoyé.</param>
      <param name="msg">
Tableau d'octet qui va être envoyé.</param>
    </member>
    <member name="M:SocketLibrary.IServer.subscribe(System.Action{System.Object,SocketLibrary.ServerEventArgs})">
      <summary>
Méthode d'abonnement évènementielle.</summary>
      <param name="listener">
Procédure qui sera appelée lors de la levée de l'évènement.</param>
    </member>
    <member name="M:SocketLibrary.IServer.unsubscribe">
      <summary>
Méthode de désabonnement évènementielle.</summary>
    </member>
    <member name="N:SocketLibrary.Properties">
    </member>
    <member name="T:SocketLibrary.Properties.Settings">
    </member>
    <member name="P:SocketLibrary.Properties.Settings.Default">
      <summary>
Gets .</summary>
    </member>
  </members>
</doc>
